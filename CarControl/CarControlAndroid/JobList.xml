<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <pages>
    <page name ="tab_axis">
      <display name="label_axis_mode" result="MODE_CTRL_LESEN_WERT" />
      <display name="label_axis_left" result="ORGFASTFILTER_RL" />
      <display name="label_axis_right" result="ORGFASTFILTER_RR" />
      <display name="label_axis_bat_volt" result="ANALOG_U_KL30" />
      <display name="label_axis_speed" result="STATE_SPEED" format="4L" />
      <display name="label_axis_valve_state" result="STATUS_SIGNALE_NUMERISCH" />
      <strings>
        <string name="tab_axis">Axis</string>
        <string name="button_axis_up">Up</string>
        <string name="button_axis_down">Down</string>
        <string name="axis_mode_conveyor">Conveyor</string>
        <string name="axis_mode_garage">Garage</string>
        <string name="axis_mode_normal">Normal</string>
        <string name="axis_mode_transport">Transport</string>
        <string name="label_axis_mode">Axis mode:</string>
        <string name="label_axis_left">Axis left:</string>
        <string name="label_axis_right">Axis right:</string>
        <string name="label_axis_bat_volt">Battery voltage [V]:</string>
        <string name="label_axis_speed">Speed [km/h]:</string>
        <string name="label_axis_valve_state">Output states:</string>
      </strings>
      <strings lang="de">
        <string name="tab_axis">Achse</string>
        <string name="button_axis_up">Aufwärts</string>
        <string name="button_axis_down">Abwärts</string>
        <string name="axis_mode_conveyor">Band</string>
        <string name="axis_mode_garage">Werkstatt</string>
        <string name="axis_mode_normal">Normal</string>
        <string name="axis_mode_transport">Transport</string>
        <string name="label_axis_mode">Achsenmodus:</string>
        <string name="label_axis_left">Achse links:</string>
        <string name="label_axis_right">Achse rechts:</string>
        <string name="label_axis_bat_volt">Batteriespannung [V]:</string>
        <string name="label_axis_speed">Geschwindigkeit [km/h]:</string>
        <string name="label_axis_valve_state">Zustand Ausgänge:</string>
      </strings>
      <job sgbd="d_ehc" show_warnigs="true">
        <![CDATA[
  class PageClass
  {
    //private static int AxisModeNormal = 0x00;
    private static int AxisModeConveyor = 0x02;
    private static int AxisModeTransport = 0x04;
    private static int AxisModeGarage = 0x40;
    private static int AxisModeMask = 0x46;

    private static int OpModeStatus = 0;
    private static int OpModeUp = 1;
    private static int OpModeDown = 2;

    private ToggleButton buttonDown;
    private ToggleButton buttonUp;
    private int updateStep = 0;
    private int opMode = OpModeStatus;
    private Int64 currentSpeed = 0;
    private Dictionary<string, EdiabasNet.ResultData> tempDict;
    private Dictionary<string, EdiabasNet.ResultData> dynDict;

    public void CreateLayout(ActivityMain activity, JobReader.PageInfo pageInfo, LinearLayout pageLayout)
    {
      LinearLayout buttonLayout = new LinearLayout(activity);
      buttonLayout.Orientation = Orientation.Horizontal;

      LinearLayout.LayoutParams buttonLayoutParams = new LinearLayout.LayoutParams(
          ViewGroup.LayoutParams.MatchParent,
          ViewGroup.LayoutParams.WrapContent);
      buttonLayoutParams.Weight = 1;

      buttonDown = new ToggleButton(activity);
      buttonDown.Text = ActivityMain.GetPageString(pageInfo, "button_axis_down");
      buttonDown.TextOff = buttonDown.Text;
      buttonDown.TextOn = buttonDown.Text;
      buttonDown.Click += delegate
      {
        if (buttonDown.Checked)
        {
          buttonUp.Checked = false;
          opMode = OpModeDown;
        }
        else
        {
          opMode = OpModeStatus;
        }
      };
      buttonLayout.AddView(buttonDown, buttonLayoutParams);

      buttonUp = new ToggleButton(activity);
      buttonUp.Text = ActivityMain.GetPageString(pageInfo, "button_axis_up");
      buttonUp.TextOff = buttonUp.Text;
      buttonUp.TextOn = buttonUp.Text;
      buttonUp.Click += delegate
      {
        if (buttonUp.Checked)
        {
          buttonDown.Checked = false;
          opMode = OpModeUp;
        }
        else
        {
          opMode = OpModeStatus;
        }
      };
      buttonLayout.AddView(buttonUp, buttonLayoutParams);

      LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
          ViewGroup.LayoutParams.MatchParent,
          ViewGroup.LayoutParams.WrapContent);
      pageLayout.AddView(buttonLayout, layoutParams);

      updateStep = 0;
      opMode = OpModeStatus;
      currentSpeed = 0;
    }

    public void DestroyLayout(JobReader.PageInfo pageInfo)
    {
      if (buttonDown != null)
      {
        buttonDown.Dispose();
        buttonDown = null;
      }
      if (buttonUp != null)
      {
        buttonUp.Dispose();
        buttonUp = null;
      }
      //Android.Util.Log.Info("Custom", "Destroyed");
    }

    public void UpdateLayout(JobReader.PageInfo pageInfo, bool pageValid, bool threadActive)
    {
      if ((buttonDown == null) || (buttonUp == null))
      {
        return;
      }

      if (pageValid)
      {
        bool stopped = currentSpeed < 5;
        buttonDown.Enabled = stopped;
        buttonUp.Enabled = true;
        if (!stopped)
        {
          opMode = OpModeStatus;
        }
        if (opMode == OpModeDown)
        {
          buttonDown.Checked = true;
          buttonUp.Checked = false;
        }
        else if (opMode == OpModeUp)
        {
          buttonDown.Checked = false;
          buttonUp.Checked = true;
        }
        else
        {
          buttonDown.Checked = false;
          buttonUp.Checked = false;
        }
      }
      else
      {
        buttonDown.Checked = false;
        buttonDown.Enabled = false;
        buttonUp.Checked = false;
        buttonUp.Enabled = false;
      }
    }

    public void ExecuteJob(EdiabasNet ediabas, ref Dictionary<string, EdiabasNet.ResultData> resultDict, bool firstCall)
    {
      if (firstCall)
      {
        updateStep = 0;
        opMode = OpModeStatus;
        tempDict = null;
        dynDict = null;
      }
      List<Dictionary<string, EdiabasNet.ResultData>> resultSets;

      switch (updateStep)
      {
        case 0:
          tempDict = null;
          ediabas.ArgString = string.Empty;
          ediabas.ArgBinaryStd = null;
          ediabas.ResultsRequests = "STATE_SPEED";

          ediabas.ExecuteJob("LESEN_REGLERWERTE");

          resultSets = ediabas.ResultSets;
          if (resultSets != null && resultSets.Count >= 2)
          {
            CommThread.MergeResultDictionarys(ref tempDict, resultSets[1]);
          }
          updateStep++;
          break;

        case 1:
          ediabas.ArgString = string.Empty;
          ediabas.ArgBinaryStd = null;
          ediabas.ResultsRequests = "ANALOG_U_KL30";

          ediabas.ExecuteJob("LESEN_ANALOGWERTE");

          resultSets = ediabas.ResultSets;
          if (resultSets != null && resultSets.Count >= 2)
          {
            CommThread.MergeResultDictionarys(ref tempDict, resultSets[1]);
          }
          updateStep++;
          break;

        case 2:
          ediabas.ArgString = string.Empty;
          ediabas.ArgBinaryStd = null;
          ediabas.ResultsRequests = "ORGFASTFILTER_RL;ORGFASTFILTER_RR;FASTFILTER_RL;FASTFILTER_RR";

          ediabas.ExecuteJob("LESEN_FILTERWERTE");

          resultSets = ediabas.ResultSets;
          if (resultSets != null && resultSets.Count >= 2)
          {
            CommThread.MergeResultDictionarys(ref tempDict, resultSets[1]);
          }
          dynDict = tempDict;
          updateStep = 0;
          break;

        default:
          updateStep = 0;
          break;
      }

      resultDict = dynDict;

      ediabas.ArgString = string.Empty;
      ediabas.ArgBinaryStd = null;
      ediabas.ResultsRequests = "WERT";

      ediabas.ExecuteJob("MODE_CTRL_LESEN");

      int axisMode = -1;
      resultSets = ediabas.ResultSets;
      if (resultSets != null && resultSets.Count >= 2)
      {
        EdiabasNet.ResultData resultData;
        if (resultSets[1].TryGetValue("WERT", out resultData))
        {
            if (resultData.opData is Int64)
            {
                axisMode = (int)((Int64)resultData.opData);
            }
        }
        CommThread.MergeResultDictionarys(ref resultDict, resultSets[1], "MODE_CTRL_LESEN_");
      }

      if (axisMode >= 0)
      {
        if ((opMode == OpModeUp) && (axisMode & AxisModeMask) != 0x00)
        {   // set normal mode
          ediabas.ArgString = "aus;aus;aus";
          ediabas.ArgBinaryStd = null;
          ediabas.ResultsRequests = "JOB_STATUS";

          ediabas.ExecuteJob("ENERGIESPARMODE");
        }

        if ((opMode == OpModeDown) && (axisMode & AxisModeConveyor) == 0x00)
        {   // set conveyor mode
          ediabas.ArgString = "ein;aus;aus";
          ediabas.ArgBinaryStd = null;
          ediabas.ResultsRequests = "JOB_STATUS";

          ediabas.ExecuteJob("ENERGIESPARMODE");
        }

        if ((opMode == OpModeDown) && (axisMode & AxisModeConveyor) != 0x00)
        {   // manual down
          // read channel states
          for (int channel = 0; channel < 4; channel++)
          {
            ediabas.ArgString = string.Format("0x{0:X02}", 0x11 + channel);
            ediabas.ArgBinaryStd = null;
            ediabas.ResultsRequests = "WERT";

            ediabas.ExecuteJob("STATUS_SIGNALE_NUMERISCH");
            resultSets = ediabas.ResultSets;
            if (resultSets != null && resultSets.Count >= 2)
            {
              CommThread.MergeResultDictionarys(ref resultDict, resultSets[1], string.Format("STATUS_SIGNALE_NUMERISCH{0}_", channel));
            }
          }

          // set channel states
          for (int channel = 0; channel < 3; channel++)
          {
            // longer timeout for bluetooth
            ediabas.ArgString = string.Format("0x{0:X02};0x01;0x0C", 0x11 + channel);
            ediabas.ArgBinaryStd = null;
            ediabas.ResultsRequests = "JOB_STATUS";

            ediabas.ExecuteJob("STEUERN_DIGITALSIGNALE");
          }
        }
      }

      {
        Int64 speed = 0;
        EdiabasNet.ResultData resultData;
        if (resultDict.TryGetValue("STATE_SPEED", out resultData))
        {
          if (resultData.opData is Int64)
          {
            speed = ((Int64)resultData.opData);
          }
        }
        currentSpeed = speed;
      }
    }

    public string FormatResult(JobReader.PageInfo pageInfo, Dictionary<string, EdiabasNet.ResultData> resultDict, string resultName)
    {
      string result = string.Empty;
      bool found;

      switch (resultName)
      {
        case "MODE_CTRL_LESEN_WERT":
        {
          Int64 axisMode = ActivityMain.GetResultInt64 (resultDict, resultName, out found);
          if (found)
          {
            if ((axisMode & AxisModeConveyor) != 0x00)
            {
              result = ActivityMain.GetPageString(pageInfo, "axis_mode_conveyor");
            }
            else if ((axisMode & AxisModeTransport) != 0x00)
            {
              result = ActivityMain.GetPageString(pageInfo, "axis_mode_transport");
            }
            else if ((axisMode & AxisModeGarage) != 0x00)
            {
              result = ActivityMain.GetPageString(pageInfo, "axis_mode_garage");
            }
            else
            {
              result = ActivityMain.GetPageString(pageInfo, "axis_mode_normal");
            }
          }
          break;
        }

        case "ORGFASTFILTER_RL":
          result = ActivityMain.FormatResultInt64(resultDict, resultName, "{0,4}");
          if (result.Length > 0) result += " / ";
          result += ActivityMain.FormatResultInt64(resultDict, "FASTFILTER_RL", "{0,4}");
          break;

        case "ORGFASTFILTER_RR":
          result = ActivityMain.FormatResultInt64(resultDict, resultName, "{0,4}");
          if (result.Length > 0) result += " / ";
          result += ActivityMain.FormatResultInt64(resultDict, "FASTFILTER_RR", "{0,4}");
          break;

        case "ANALOG_U_KL30":
        {
          Int64 voltage = ActivityMain.GetResultInt64(resultDict, resultName, out found);
          if (found)
          {
            result = string.Format(ActivityMain.culture, "{0,6:0.00}", (double)voltage / 1000);
          }
          break;
        }

        case "STATUS_SIGNALE_NUMERISCH":
          for (int channel = 0; channel < 4; channel++)
          {
            result = ActivityMain.FormatResultInt64(resultDict, string.Format(ActivityMain.culture, "STATUS_SIGNALE_NUMERISCH{0}_WERT", channel), "{0}") + result;
          }
          break;
      }
      return result;
    }
  }
        ]]>
      </job>
    </page>
    <page name ="tab_motor">
      <display name="label_motor_bat_voltage" result="STAT_UBATT_WERT" format="7.2R" />
      <display name="label_motor_temp" result="STAT_CTSCD_tClntLin_WERT" format="6.2R" />
      <display name="label_motor_air_mass" result="STAT_LUFTMASSE_WERT" format="7.2R" />
      <display name="label_motor_intake_air_temp" result="STAT_LADELUFTTEMPERATUR_WERT" format="6.2R" />
      <display name="label_motor_ambient_temp" result="STAT_UMGEBUNGSTEMPERATUR_WERT" format="6.2R" />
      <display name="label_motor_boost_press_set" result="STAT_LADEDRUCK_SOLL_WERT" format="6.2R" />
      <display name="label_motor_boost_press_act" result="STAT_LADEDRUCK_WERT" format="6.2R" />
      <display name="label_motor_rail_press_set" result="STAT_RAILDRUCK_SOLL_WERT" format="6.2R" />
      <display name="label_motor_rail_press_act" result="STAT_RAILDRUCK_WERT" format="6.2R" />
      <display name="label_motor_air_mass_set" result="STAT_LUFTMASSE_SOLL_WERT" format="6.2R" />
      <display name="label_motor_air_mass_act" result="STAT_LUFTMASSE_PRO_HUB_WERT" format="6.2R" />
      <display name="label_motor_ambient_press" result="STAT_UMGEBUNGSDRUCK_WERT" format="6.2R" />
      <display name="label_motor_fuel_temp" result="STAT_KRAFTSTOFFTEMPERATURK_WERT" format="6.2R" />
      <display name="label_motor_temp_before_filter" result="STAT_ABGASTEMPERATUR_VOR_PARTIKELFILTER_1_WERT" format="6.2R" />
      <display name="label_motor_temp_before_cat" result="STAT_ABGASTEMPERATUR_VOR_KATALYSATOR_WERT" format="6.2R" />
      <display name="label_motor_part_filt_dist_since_regen" result="STAT_STRECKE_SEIT_ERFOLGREICHER_REGENERATION_WERT" />
      <display name="label_motor_exhaust_press" result="STAT_DIFFERENZDRUCK_UEBER_PARTIKELFILTER_WERT" format="6.2R" />
      <display name="label_motor_oil_press_switch" result="STAT_OELDRUCKSCHALTER_EIN_WERT" />
      <display name="label_motor_part_filt_request" result="STAT_REGENERATIONSANFORDERUNG_WERT" />
      <display name="label_motor_part_filt_status" result="STAT_EGT_st_WERT" />
      <display name="label_motor_part_filt_unblocked" result="STAT_REGENERATION_BLOCKIERUNG_UND_FREIGABE_WERT" />
      <strings>
        <string name="tab_motor">Motor</string>
        <string name="label_motor_air_mass">Air mass [kg/h]:</string>
        <string name="label_motor_air_mass_act">Air mass act [mg/pass]:</string>
        <string name="label_motor_air_mass_set">Air mass set [mg/pass]:</string>
        <string name="label_motor_ambient_press">Ambient pressure [mbar]:</string>
        <string name="label_motor_ambient_temp">Ambient temp. [°C]:</string>
        <string name="label_motor_bat_voltage">Battery voltage [V]:</string>
        <string name="label_motor_boost_press_act">Boost pressure act [mbar]:</string>
        <string name="label_motor_boost_press_set">Boost pressure set [mbar]:</string>
        <string name="label_motor_exhaust_press">Exhaust back pressure [mbar]:</string>
        <string name="label_motor_fuel_temp">Fuel temp. [°C]:</string>
        <string name="label_motor_intake_air_temp">Intake air temp. [°C]:</string>
        <string name="label_motor_part_filt_dist_since_regen">Part. filter dist. since regen. [km]:</string>
        <string name="label_motor_part_filt_request">Part. filter regeneration request:</string>
        <string name="label_motor_part_filt_status">Part. filter regeneration:</string>
        <string name="label_motor_part_filt_unblocked">Part. filter unblock regeneration:</string>
        <string name="label_motor_oil_press_switch">Oil pressure switch:</string>
        <string name="label_motor_rail_press_act">Rail pressure act [bar]:</string>
        <string name="label_motor_rail_press_set">Rail pressure set [bar]:</string>
        <string name="label_motor_temp">Motor temperature [°C]:</string>
        <string name="label_motor_temp_before_cat">Temp. before catalyst [°C]:</string>
        <string name="label_motor_temp_before_filter">Temp. before part. filter [°C]:</string>
      </strings>
      <strings lang="de">
        <string name="tab_motor">Motor</string>
        <string name="label_motor_air_mass">Luftmasse [kg/h]:</string>
        <string name="label_motor_air_mass_act">Luftmasse ist [mg/Hub]:</string>
        <string name="label_motor_air_mass_set">Luftmasse soll [mg/Hub]:</string>
        <string name="label_motor_ambient_press">Umgebungsdruck [mbar]:</string>
        <string name="label_motor_ambient_temp">Umgebungstemperatur [°C]:</string>
        <string name="label_motor_bat_voltage">Batteriespannung [V]:</string>
        <string name="label_motor_boost_press_act">Ladedruck ist [mbar]:</string>
        <string name="label_motor_boost_press_set">Ladedruck soll [mbar]:</string>
        <string name="label_motor_exhaust_press">Abgasgegendruck [mbar]:</string>
        <string name="label_motor_fuel_temp">Treibstofftemperatur [°C]:</string>
        <string name="label_motor_intake_air_temp">Ansauglufttemp. [°C]:</string>
        <string name="label_motor_part_filt_dist_since_regen">Partikelfilter Strecke seit Regen. [km]:</string>
        <string name="label_motor_part_filt_request">Partikelfilter Anforderung Regen.:</string>
        <string name="label_motor_part_filt_status">Partikelfilter Regeneration:</string>
        <string name="label_motor_part_filt_unblocked">Partikelfilter Freigabe Regen.:</string>
        <string name="label_motor_oil_press_switch">Öldruckschalter:</string>
        <string name="label_motor_rail_press_act">Raildruck ist [bar]:</string>
        <string name="label_motor_rail_press_set">Raildruck soll [bar]:</string>
        <string name="label_motor_temp">Motortemperatur [°C]:</string>
        <string name="label_motor_temp_before_cat">Temp. vor Katalysator [°C]:</string>
        <string name="label_motor_temp_before_filter">Temp. vor Partikelfilter [°C]:</string>
      </strings>
      <job sgbd="d_motor" show_warnigs="true">
        <![CDATA[
  class PageClass
  {
    public void ExecuteJob(EdiabasNet ediabas, ref Dictionary<string, EdiabasNet.ResultData> resultDict, bool firstCall)
    {
      string argString = "IUBAT;ITKUM;CTSCD_tClntLin;ITKRS;ILMKG;ILMMG;SLMMG;ITUMG;ITKRS;IPLAD;SPLAD;ITLAL;IPUMG;IPRDR;SPRDR;ITAVO;ITAVP1;IPDIP;IDSLRE;IREAN;EGT_st;ISRBF;ISOED";
      if (firstCall)
      {
        argString = "JA;" + argString;
      }
      else
      {
        argString = "NEIN;" + argString;
      }
      ediabas.ArgString = argString;
      ediabas.ArgBinaryStd = null;
      ediabas.ResultsRequests = string.Empty;

      ediabas.ExecuteJob("STATUS_MESSWERTBLOCK_LESEN");

      List<Dictionary<string, EdiabasNet.ResultData>> resultSets = ediabas.ResultSets;
      if (resultSets != null && resultSets.Count >= 2)
      {
          CommThread.MergeResultDictionarys(ref resultDict, resultSets[1]);
      }
    }

    public string FormatResult(JobReader.PageInfo pageInfo, Dictionary<string, EdiabasNet.ResultData> resultDict, string resultName)
    {
      string result = string.Empty;
      bool found;

      switch (resultName)
      {
        case "STAT_STRECKE_SEIT_ERFOLGREICHER_REGENERATION_WERT":
          result = string.Format(ActivityMain.culture, "{0,6:0.0}", ActivityMain.GetResultDouble(resultDict, resultName, out found) / 1000.0);
          if (!found) result = string.Empty;
          break;

        case "STAT_OELDRUCKSCHALTER_EIN_WERT":
          result = ((ActivityMain.GetResultDouble (resultDict, resultName, out found) > 0.5) && found) ? "1" : "0";
          if (!found) result = string.Empty;
          break;

        case "STAT_REGENERATIONSANFORDERUNG_WERT":
          result = ((ActivityMain.GetResultDouble (resultDict, resultName, out found) < 0.5) && found) ? "1" : "0";
          if (!found) result = string.Empty;
          break;

        case "STAT_EGT_st_WERT":
          result = ((ActivityMain.GetResultDouble (resultDict, resultName, out found) > 1.5) && found) ? "1" : "0";
          if (!found) result = string.Empty;
          break;

        case "STAT_REGENERATION_BLOCKIERUNG_UND_FREIGABE_WERT":
          result = ((ActivityMain.GetResultDouble (resultDict, resultName, out found) < 0.5) && found) ? "1" : "0";
          if (!found) result = string.Empty;
          break;
      }
      return result;
    }
  }
        ]]>
      </job>
    </page>
    <page name ="tab_motor_uneven_running">
      <display name="label_motor_quant_corr_c1" result="STAT_LAUFUNRUHE_LLR_MENGE_ZYL1_WERT" format="5.2R" />
      <display name="label_motor_quant_corr_c2" result="STAT_LAUFUNRUHE_LLR_MENGE_ZYL2_WERT" format="5.2R" />
      <display name="label_motor_quant_corr_c3" result="STAT_LAUFUNRUHE_LLR_MENGE_ZYL3_WERT" format="5.2R" />
      <display name="label_motor_quant_corr_c4" result="STAT_LAUFUNRUHE_LLR_MENGE_ZYL4_WERT" format="5.2R" />
      <strings>
        <string name="tab_motor_uneven_running">Uneven running</string>
        <string name="label_motor_quant_corr_c1">Quant. corr. cylinder 1 [mg/pass]:</string>
        <string name="label_motor_quant_corr_c2">Quant. corr. cylinder 2 [mg/pass]:</string>
        <string name="label_motor_quant_corr_c3">Quant. corr. cylinder 3 [mg/pass]:</string>
        <string name="label_motor_quant_corr_c4">Quant. corr. cylinder 4 [mg/pass]:</string>
      </strings>
      <strings lang="de">
        <string name="tab_motor_uneven_running">Laufunruhe</string>
        <string name="label_motor_quant_corr_c1">Mengenkorr. Zylinder 1 [mg/Hub]:</string>
        <string name="label_motor_quant_corr_c2">Mengenkorr. Zylinder 2 [mg/Hub]:</string>
        <string name="label_motor_quant_corr_c3">Mengenkorr. Zylinder 3 [mg/Hub]:</string>
        <string name="label_motor_quant_corr_c4">Mengenkorr. Zylinder 4 [mg/Hub]:</string>
      </strings>
      <job sgbd="d_motor" activate="true" show_warnigs="true">
        <![CDATA[
  class PageClass
  {
    public void ExecuteJob(EdiabasNet ediabas, ref Dictionary<string, EdiabasNet.ResultData> resultDict, bool firstCall)
    {
      ediabas.ArgString = "LLR_EIN";
      ediabas.ArgBinaryStd = null;
      ediabas.ResultsRequests = "JOB_STATUS";

      ediabas.ExecuteJob("START_SYSTEMCHECK_ZYL");

      ediabas.ArgString = string.Empty;
      ediabas.ArgBinaryStd = null;
      ediabas.ResultsRequests = "STAT_LAUFUNRUHE_LLR_MENGE_ZYL1_WERT;STAT_LAUFUNRUHE_LLR_MENGE_ZYL2_WERT;STAT_LAUFUNRUHE_LLR_MENGE_ZYL3_WERT;STAT_LAUFUNRUHE_LLR_MENGE_ZYL4_WERT";

      ediabas.ExecuteJob("STATUS_LAUFUNRUHE_LLR_MENGE");

      List<Dictionary<string, EdiabasNet.ResultData>> resultSets = ediabas.ResultSets;
      if (resultSets != null && resultSets.Count >= 2)
      {
          CommThread.MergeResultDictionarys(ref resultDict, resultSets[1]);
      }
    }
  }
        ]]>
      </job>
    </page>
    <page name ="tab_motor_rot_irregular">
      <display name="label_motor_rpm_c1" result="STAT_LAUFUNRUHE_DREHZAHL_ZYL1_WERT" format="7.2R" />
      <display name="label_motor_rpm_c1" result="STAT_LAUFUNRUHE_DREHZAHL_ZYL2_WERT" format="7.2R" />
      <display name="label_motor_rpm_c1" result="STAT_LAUFUNRUHE_DREHZAHL_ZYL3_WERT" format="7.2R" />
      <display name="label_motor_rpm_c1" result="STAT_LAUFUNRUHE_DREHZAHL_ZYL4_WERT" format="7.2R" />
      <strings>
        <string name="tab_motor_rot_irregular">Rot. irregularity</string>
        <string name="label_motor_rpm_c1">Revolution cylinder 1 [1/min]:</string>
        <string name="label_motor_rpm_c2">Revolution cylinder 2 [1/min]:</string>
        <string name="label_motor_rpm_c3">Revolution cylinder 3 [1/min]:</string>
        <string name="label_motor_rpm_c4">Revolution cylinder 4 [1/min]:</string>
      </strings>
      <strings lang="de">
        <string name="tab_motor_rot_irregular">Drehungsgleichförmig.</string>
        <string name="label_motor_rpm_c1">Drehzahl Zylinder 1 [1/min]:</string>
        <string name="label_motor_rpm_c2">Drehzahl Zylinder 2 [1/min]:</string>
        <string name="label_motor_rpm_c3">Drehzahl Zylinder 3 [1/min]:</string>
        <string name="label_motor_rpm_c4">Drehzahl Zylinder 4 [1/min]:</string>
      </strings>
      <job sgbd="d_motor" activate="true" show_warnigs="true">
        <![CDATA[
  class PageClass
  {
    public void ExecuteJob(EdiabasNet ediabas, ref Dictionary<string, EdiabasNet.ResultData> resultDict, bool firstCall)
    {
      ediabas.ArgString = "LLR_AUS";
      ediabas.ArgBinaryStd = null;
      ediabas.ResultsRequests = "JOB_STATUS";

      ediabas.ExecuteJob("START_SYSTEMCHECK_ZYL");

      ediabas.ArgString = string.Empty;
      ediabas.ArgBinaryStd = null;
      ediabas.ResultsRequests = "STAT_LAUFUNRUHE_DREHZAHL_ZYL1_WERT;STAT_LAUFUNRUHE_DREHZAHL_ZYL2_WERT;STAT_LAUFUNRUHE_DREHZAHL_ZYL3_WERT;STAT_LAUFUNRUHE_DREHZAHL_ZYL4_WERT";

      ediabas.ExecuteJob("STATUS_LAUFUNRUHE_DREHZAHL");

      List<Dictionary<string, EdiabasNet.ResultData>> resultSets = ediabas.ResultSets;
      if (resultSets != null && resultSets.Count >= 2)
      {
          CommThread.MergeResultDictionarys(ref resultDict, resultSets[1]);
      }
    }
  }
        ]]>
      </job>
    </page>
  </pages>
</configuration>
